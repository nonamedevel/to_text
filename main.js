

/****************************** Test ******************************/

const testCases = [
    [1, 'один'],
    [2, 'два'],
    [3, 'три'],
    [4, 'четыре'],
    [5, 'пять'],
    [9, 'девять'],
    [10, 'десять'],
    [11, 'одиннадцать'],
    [14, 'четырнадцать'],
    [15, 'пятнадцать'],
    [19, 'девятнадцать'],
    [20, 'двадцать'],
    [21, 'двадцать один'],
    [22, 'двадцать два'],
    [25, 'двадцать пять'],
    [30, 'тридцать'],
    [40, 'сорок'],
    [50, 'пятьдесят'],
    [99, 'девяносто девять'],
    [100, 'сто'],
    [101, 'сто один'],
    [110, 'сто десять'],
    [111, 'сто одиннадцать'],
    [119, 'сто девятнадцать'],
    [120, 'сто двадцать'],
    [121, 'сто двадцать один'],
    [199, 'сто девяносто девять'],
    [200, 'двести'],
    [300, 'триста'],
    [400, 'четыреста'],
    [500, 'пятьсот'],
    [700, 'семьсот'],
    [999, 'девятьсот девяносто девять'],
    [1_000, 'одна тысяча'],
    [1_001, 'одна тысяча один'],
    [1_002, 'одна тысяча два'],
    [1_010, 'одна тысяча десять'],
    [1_011, 'одна тысяча одиннадцать'],
    [1_014, 'одна тысяча четырнадцать'],
    [1_020, 'одна тысяча двадцать'],
    [2_000, 'две тысячи'],
    [
        2_911,
        'две тысячи ' +
        'девятьсот одиннадцать'
    ],
    [4_000, 'четыре тысячи'],
    [5_000, 'пять тысяч'],
    [9_999, 'девять тысяч девятьсот девяносто девять'],
    [10_000, 'десять тысяч'],
    [10_001, 'десять тысяч один'],
    [11_000, 'одиннадцать тысяч'],
    [12_000, 'двенадцать тысяч'],
    // [20_000, 'привет'], // testing test
    [21_000, 'двадцать одна тысяча'],
    [25_000, 'двадцать пять тысяч'],
    [
        83_614, 
        'восемьдесят три тысячи ' + 
        'шестьсот четырнадцать'
    ],
    [100_000, 'сто тысяч'],
    [100_001, 'сто тысяч один'],
    [101_000, 'сто одна тысяча'],
    [110_800, 'сто десять тысяч восемьсот'],
    [111_000, 'сто одиннадцать тысяч'],
    [200_000, 'двести тысяч'],
    [1_000_000, 'один миллион'],
    [1_000_001, 'один миллион один'],
    [2_000_000, 'два миллиона'],
    [5_000_005, 'пять миллионов пять'],
    [
        12_345_678, 
        'двенадцать миллионов ' + 
        'триста сорок пять тысяч ' + 
        'шестьсот семьдесят восемь'
    ],
    [100_000_000, 'сто миллионов'],
    [
        123_456_789,
        'сто двадцать три миллиона ' +
        'четыреста пятьдесят шесть тысяч ' +
        'семьсот восемьдесят девять'
    ],
    [
        999_999_999, 
        'девятьсот девяносто девять миллионов ' + 
        'девятьсот девяносто девять тысяч ' + 
        'девятьсот девяносто девять'
    ],
    [1_000_000_000, 'один миллиард'],
    [
        1_520_000_000, 
        'один миллиард ' + 
        'пятьсот двадцать миллионов'
    ],
    [2_000_000_000, 'два миллиарда'],
    [
        7_199_254_740_991,
        'семь триллионов ' +
        'сто девяносто девять миллиардов ' +
        'двести пятьдесят четыре миллиона ' +
        'семьсот сорок тысяч ' +
        'девятьсот девяносто один'
    ],
    [
        999_999_999_999_999,
        'девятьсот девяносто девять триллионов ' +
        'девятьсот девяносто девять миллиардов ' +
        'девятьсот девяносто девять миллионов ' +
        'девятьсот девяносто девять тысяч ' +
        'девятьсот девяносто девять'
    ],
]

function doTest(index) {
    console.log(testCases[index][0].toText())
    console.log(testCases[index][1])
}

function doAllTests() {
    for (const testCase of testCases) {
        const str1 = testCase[0].toText()
        const str2 = testCase[1]
        if (str1 !== str2) {
            console.log('*** FAIL ***')
            console.log('\nExpected:')
            console.log(str2)
            console.log('\nGot:')
            console.log(str1)
            return
        }
    }
    console.log('*** PASS ***')
}


/****************************** Implementation ******************************/

function numberToRussianWords1(num, unit) {
    if (!Number.isSafeInteger(num) || num <= 0) {
        return null;
    }

    const ONES = [
        'ноль', 'один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять',
        'десять', 'одиннадцать', 'двенадцать', 'тринадцать', 'четырнадцать', 'пятнадцать',
        'шестнадцать', 'семнадцать', 'восемнадцать', 'девятнадцать'
    ]
    
    const TENS = [
        '', '', 'двадцать', 'тридцать', 'сорок', 'пятьдесят', 'шестьдесят',
        'семьдесят', 'восемьдесят', 'девяносто'
    ]
    
    const HUNDREDS = [
        '', 'сто', 'двести', 'триста', 'четыреста', 'пятьсот',
        'шестьсот', 'семьсот', 'восемьсот', 'девятьсот'
    ]
    
    const SCALES = [
        ['', '', '', 'm'],
        ['тысяча', 'тысячи', 'тысяч', 'f'],
        ['миллион', 'миллиона', 'миллионов', 'm'],
        ['миллиард', 'миллиарда', 'миллиардов', 'm'],
        ['триллион', 'триллиона', 'триллионов', 'm'],
        ['квадриллион', 'квадриллиона', 'квадриллионов', 'm'],
    ]
    
    function getOnes(num, gender) {
        if (num === 1) {
            return gender === 'f' ? 'одна' : 'один'
        } else if (num === 2) {
            return gender === 'f' ? 'две' : 'два'
        } else {
            return ONES[num]
        }
    }
    
    function triToWords(num, gender) {
        const parts = []
        if (num === 0) {
            return []
        }
        const h = Math.floor(num / 100)
        const rem = num % 100
        if (h) {
            parts.push(HUNDREDS[h])
        }
        if (rem < 20) {
            if (rem) {
                parts.push(getOnes(rem, gender))
            }
        } else {
            const t = Math.floor(rem / 10)
            const o = rem % 10
            parts.push(TENS[t])
            if (o) {
                parts.push(getOnes(o, gender))
            }
        }
        return parts
    }
    
    function scaleForm(n) {
        const lastTwo = n % 100
        if (lastTwo >= 11 && lastTwo <= 14) return 2
        const last = n % 10
        if (last === 1) return 0
        if (last >= 2 && last <= 4) return 1
        return 2
    }

    let parts = []
    let cur = num
    let scaleIdx = 0

    while (cur > 0) {
        const tri = cur % 1000
        if (tri > 0) {
            const scale = SCALES[scaleIdx]
            const gender = scale[3]
            const triWords = triToWords(tri, gender)
            if (scaleIdx > 0) {
                const formIdx = scaleForm(tri)
                const scaleName = scale[formIdx]
                parts = [...triWords, scaleName, ...parts]
            } else {
                parts = [...triWords, ...parts]
            }
        }
        cur = Math.floor(cur / 1000)
        scaleIdx += 1
    }

    const numStr = parts.join(' ')

    if (unit === undefined) {
        return numStr
    }

    let form
    const lastDigit = num % 10
    if (lastDigit === 1) {
        form = unit[0]
    } else if (lastDigit >= 2 && lastDigit <= 4) {
        form = unit[1]
    } else {
        form = unit[2]
    }
    return `${numStr} ${form}`
}

Object.defineProperty(Number.prototype, 'toText', {
    configurable: true,
    writable: true,
    value: function (unit) {
        return numberToRussianWords1(this.valueOf(), unit)
    }
})

// console.log((123_456_789).toText())
// doTest(2)
// doAllTests()

console.log((42).toText());
console.log((1e6).toText());
console.log((1.5e6).toText());
console.log((0).toText());
console.log((-5).toText());
console.log((3.14).toText());
console.log((Infinity).toText());
console.log((9007199254740992).toText());

console.log((1).toText(['рубль', 'рубля', 'рублей']))
console.log((10).toText(['сообщение', 'сообщения', 'сообщений']))
console.log((23).toText(['яблоко', 'яблока', 'яблок']))
